// ignore_for_file: prefer_const_constructors, prefer_const_literals_to_create_immutables

import 'package:flutter/material.dart';
import 'package:wallet_app/constants/sizes.dart';
import 'package:wallet_app/constants/styles.dart';

import '../../widgets/app_bar/my_app_bar.dart';

import '../home_screen/widgets/background.dart';
import 'widgets/calculator_buttons_fixed.dart';

enum Operations {
  add,
  minus,
  multiply,
  divide,
}

class CalculatorScreen extends StatefulWidget {
  static const String routeName = '/add-transaction-screen';
  //* to differentiate between adding new transaction and editting existing one

  const CalculatorScreen({
    Key? key,
  }) : super(key: key);

  @override
  State<CalculatorScreen> createState() => _CalculatorScreenState();
}

class _CalculatorScreenState extends State<CalculatorScreen> {
  //* this is a temp variable that will hold the result of an operation after an operation button is clicked
  //* after executing the calculate method
  // double calcRes = 0;
  //* this will hold the numbers that are currently clicked
  List<String> currentNumberList = [];
  //* this will hold the current operation
  Operations? currentOperation;

  //* this will hold the value of the number entered before an operation button is clicked
  double firstNumber = 0;

//* when clicking for the first time => i will set the numbers list to the numbers being clicked
//* when clicking an operation i will set the current operation and then set the first number to the current numbers list and clear the numbers list
//* when clicking another numbers i will keep the operation as it is i won't change it now cause i want to wait until the user finishes entering numbers
//* when clicking another operation i will replace it with the current operation then
//* making the calcRes to be firstNumber to be (+-*/) the double.parse(numbersString)
//* so now in the very first time to enter numbers ( there is no operation and there is no first number)
//* after first operation clicked there is operation and firstNumber
//* after this there will be always firstNumber and operation
//* the calculation will happen when clicking an operation button i will calculate the last firstNumber and the last operation and the currentNumbersList
//* finished integers calculating
//* next step is to add the double calculating and then change the calculator layout to have the equal button
//? the save button will be just an icon (save)
//? you can remove the percent button but wait ... you can use it as it is important in buying stuff
//? you can make it

//?---------------
//? i might need to add a small screen over the calculator and when clicking the equal button the result will be shown in the priceInput next to the title and the description

  void setcurrentNumberList(String value) {
    //* this will clear ensure that if the user clicked equal button then clicked a number without clicking an operation first to start over and clear the first number and start calculating from the start
    if (currentOperation == null && firstNumber != 0) {
      setState(() {
        firstNumber = 0;
      });
    }
    //*
    // if (calcRes != 0) {
    //   setState(() {
    //     calcRes = 0;
    //   });
    // }
    if (value == '.' && currentNumberList.contains('.')) {
      return;
    }

    if (currentNumberList.length == 1 && currentNumberList[0] == '0') {
      if (value == '0') {
        return;
      } else {
        currentNumberList.clear();
      }
    }

    setState(() {
      currentNumberList.add(value);
    });
  }

  void deleteCurrenOperation() {
    setState(() {
      currentOperation = null;
    });
  }

  //* this will be executed after clicking an operation button
  //* and i checks if it the first time to click an operation button or not
  //* to deal will the first number if it is there or not
  //*
  void setCurrentOperation(Operations operation) {
    if (firstNumber != 0 && currentOperation != null) {
      calculate();
    } else {
      //* this mean that it is the first time to press an operation button
      //* so i will clear the currentNumberList outside the current state cause i need something to be shown in the text screen(blueGrey)
      //* and i will set the firstNumber to the content of the currentNumberList
      if (currentNumberString != '0') {
        setState(() {
          firstNumber = double.parse(currentNumberString);
        });
      }
    }
    currentNumberList = [];
    //* then i will set the currentOparation to the operation
    setState(() {
      currentOperation = operation;
    });
  }

  String get currentNumberString {
    String viewedNumber = '';
    for (var element in currentNumberList) {
      viewedNumber += element.toString();
    }
    if (viewedNumber == '') {
      viewedNumber = '0';
    }
    return viewedNumber;
  }

//* this will only calculate the output of the firstNumber , operation, currentNumberlist
//* then changing the value of the calcRes

  void calculate() {
    if (currentOperation == null) {
      firstNumber == double.parse(currentNumberString);
      return;
    }
    if (currentOperation == Operations.add) {
      firstNumber = firstNumber + double.parse(currentNumberString);
    } else if (currentOperation == Operations.minus) {
      firstNumber = firstNumber - double.parse(currentNumberString);
    } else if (currentOperation == Operations.divide) {
      if (double.parse(currentNumberString) == 0) {}
      firstNumber = firstNumber / double.parse(currentNumberString);
    } else if (currentOperation == Operations.multiply) {
      firstNumber = firstNumber * double.parse(currentNumberString);
    }
    setState(() {
      // calcRes = firstNumber;
      currentNumberList = [];
    });
  }

  String get operationToString {
    if (currentOperation == Operations.add) {
      return '+';
    } else if (currentOperation == Operations.minus) {
      return '-';
    } else if (currentOperation == Operations.multiply) {
      return 'x';
    } else if (currentOperation == Operations.divide) {
      return '/';
    } else {
      return '';
    }
  }

  void calcPercent() {}

  //* this will deal with the empty list to view 0 instead of ' '
  String get currentNumberToView {
    return currentNumberString == '0' ? '' : currentNumberString;
  }

  //* this will remove the .0 from the firstNumber only to be viewed
  String get firstNumberToView {
    return firstNumber.toString().endsWith('.0')
        ? firstNumber.toString().replaceAll('.0', '')
        : firstNumber.toString();
  }

  //* this will remove the .0 from the calcRes only to be viewed
  // String get calcResToView {
  //   return calcRes.toString().endsWith('.0')
  //       ? calcRes.toString().replaceAll('.0', '')
  //       : calcRes.toString();
  // }

  String get output {
    //* this var will be viewed on the screen
    String value = '';

    if (firstNumber == 0) {
      value = currentNumberString;
    } else if (firstNumber != 0 &&
        currentOperation != null &&
        currentNumberList.isNotEmpty) {
      value = '$firstNumberToView $operationToString $currentNumberString';
    } else if (firstNumber != 0 && currentOperation != null) {
      value = '$firstNumberToView $operationToString';
    } else {
      value = firstNumberToView;
    }

    // if (calcRes != 0) {
    //   value = value = '$calcResToView $operationToString $currentNumberToView';
    // } else if (calcRes == 0 && firstNumber == 0) {
    //   value = currentNumberString;
    // } else {
    //   value = '$firstNumberToView $operationToString $currentNumberToView';
    // }

    // if (value.endsWith('.0')) {
    //   value = value.replaceAll('.0', '');
    // }

    return value;
  }

  void clearAll() {
    currentOperation = null;
    firstNumber = 0;
    setState(() {
      // calcRes = 0;
      currentNumberList = [];
    });
  }

  void backspace() {
    setState(() {
      currentNumberList.removeLast();
    });
  }

  @override
  Widget build(BuildContext context) {
    //* this argument to inform this widget that i need to add a quick action not a transaction
    //* when needing to add a quick action i will add the argument to this with the argument:true like in the add_quick_action_button.dart file

    return Scaffold(
      extendBodyBehindAppBar: true,
      //* this is the drawer
      drawer: Drawer(
        child: Container(
          color: Colors.white,
        ),
      ),
      body: Stack(
        children: [
          //* this is the background of the screen
          Background(),

          SafeArea(
            child: Container(
              padding: EdgeInsets.symmetric(horizontal: kDefaultPadding / 2),
              child: Column(
                children: [
                  MyAppBar(
                    title: 'Calculator',
                  ),
                  //* space between the app bar and the next widget
                  SizedBox(
                    height: 40,
                  ),
                  Column(
                    children: [
                      Text('firstNumber = $firstNumber'),
                      Text('currentNumberList = $currentNumberList'),
                      // Text('calcRes = $calcRes'),
                      Text('currentOperation = ${currentOperation.toString()}'),
                    ],
                  ),
                  Container(
                    alignment: Alignment.center,
                    width: double.infinity,
                    height: 150,
                    decoration: BoxDecoration(
                      color: Colors.blueGrey[200],
                      borderRadius: BorderRadius.circular(20),
                    ),
                    child: Text(
                      output,
                      style: TextStyle(
                        color: Colors.black,
                        fontSize: 30,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                  SizedBox(
                    height: kDefaultPadding,
                  ),
                  Expanded(
                    child: Container(
                      width: double.infinity,
                      height: double.infinity,
                      margin: EdgeInsets.only(
                        bottom: kDefaultPadding,
                      ),
                      padding: EdgeInsets.all(kDefaultPadding),
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius:
                            BorderRadius.circular(kDefaultBorderRadius),
                        boxShadow: [kDefaultBoxShadow],
                      ),
                      child: CalculatorButtonsFixed(
                        setCurrentNumber: setcurrentNumberList,
                        setCurrentOperation: setCurrentOperation,
                        clearAll: clearAll,
                        calculate: calculate,
                        deleteCurrenOperation: deleteCurrenOperation,
                        backspace: backspace,
                        calcPercent: calcPercent,
                      ),
                    ),
                  )
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}
